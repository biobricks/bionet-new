#!/usr/bin/env node

var path = require('path');
var net = require('net');
var fs = require('fs');
var uuid = require('uuid').v4;
var through = require('through2');
var spawn = require('child_process').spawn;

var connect = require('../tests/common/connect.js');

var minimist = require('minimist');
var argv = minimist(process.argv.slice(2), {
    alias: {
      s: 'settings',
      g: 'global'
    },
    boolean: [
      'help',
      'g'
    ],
    default: {
        settings: '../settings.js'
    }
});

var settings = require(argv.settings)(argv);

function usage(err) {
  var f;
  if(err) {
    f = console.error;
    f(err);
    f('');
  } else {
    f = console.log;
  }

  f("Usage:", path.basename(__filename), "cmd [args]");
  f('');
  f("Where cmd is one of the following:");
  f('');
  f("  server: Start the bionet server");
  f("  status: Connect to the running bionet server and report the status");
  f("  search <query>: Run a global search and report the results");
  f("  create <json>: Create a virtual and physical from the specified JSON");
  f('');
  if(err) {
    process.exit(1);
  } else {
    process.exit(0);
  }
}

function fail(str, exitCode) {
  console.error(str);
  process.exit(exitCode || 1);
}

if(argv._.length < 1) {
  usage("No command specified");
}

var cmd = argv._[0];
var args = argv._.slice(1);

if(!cmd) {
  usage("No command specified");
}

if(cmd === 'help') {
  usage();
}

function main() {

  if(cmd.match(/^stat/)) { // show running node status

    connect({login: false}, function(err, done, remote) {
      if(err) fail(err);

      remote.getStatus(function(err, data) {
        if(err) fail(err);

        console.log(JSON.stringify(data, null, 2));
        
        done();
      });
    });

  } else if(cmd.match(/^create/)) { // create a virtual and physical
    
    if(!args.length) usage("You must provide JSON for the material to create");

    var m = JSON.parse(args[0]);
    if(!m || !m.name) {
      usage("The JSON must contain at least a name");
    }

    connect(function(err, done, remote) {
      if(err) fail(err);
    
      remote.saveVirtual(m, function(err, id) {
        if(err) {
          done();
          fail(err);
        }
        console.log("Created virtual with id:", id);

        var p = {
          virtual_id: id,
          name: m.name + ' ' + uuid()
        };
        
        remote.savePhysical(p, null, null, function(err, id) {
          if(err) {
            console.log("AAAAAAA")
            done();
            fail(err);
          }

          console.log("Created physical:", id)

          done();
        });
      });
    })
    

  } else if(cmd.match(/^search/)) { // run a global search

    if(!args.length) usage("You must provide a search query");

    var isGlobal = argv.global;
    var isBlast = false;
    var query = args[0];
    var ntQuery = query.replace(/[ACGTUacgtu\s]+/, '');
    
    if(ntQuery.length === 0) {
      isBlast = true;
    }
    
    connect(function(err, done, remote) {
      if(err) fail(err);

      if(!isGlobal) { // local search
        var resultStream;
        if(isBlast) {
          console.log("Searching locally using BLAST");
          resultStream = remote.blast(ntQuery);
        } else {
          console.log("Searching locally using plain substring matching");
          resultStream = remote.searchAvailable(query);
        }
        
        resultStream.on('data', function(result) {
          console.log(JSON.stringify(result, null, 2));
        });
        
      } else { // global search

        if(isBlast) {
          console.log("Searching globally using BLAST");
          remote.peerBlast(ntQuery, function(err, result) {
            if(err) {
              done();
              fail(err);
            }

            console.log(JSON.stringify(result, null, 2));
            done();
          });
          
        } else {
          console.log("Searching globally using plain substring matching");
          remote.peerSearch(query, function(err, result) {
            if(err) {
              done();
              fail(err);
            }

            console.log(JSON.stringify(result, null, 2));
            done();
          });
        }

      }
    });

    
  } else if(cmd.match(/^server/)) { // start the server

    var server = spawn(path.join(__dirname, 'server.js'), [])
    server.stdout.setEncoding('utf8');
    server.stdout.on('data', console.log);
    
    server.stderr.setEncoding('utf8');
    server.stdout.on('data', console.error);    
    
  } else {
    usage("Invalid command");
  }
}

main();
